{"version":3,"sources":["../../src/hooks/tree.js"],"names":["isEmpty","pick","queryString","List","useParseBraidValue","braidClient","parameterNames","parse","v","isList","toJS","undefined","getName","id","parameters","options","type","split","types","typesInTreeWithDepth","JSON","logger","warn","stringify","useTree","name"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AACA,SAASC,WAAT,QAA4B,UAA5B;AAEA,MAAMC,cAAc,GAAG,CACrB,OADqB,EAErB,MAFqB,EAGrB,OAHqB,EAIrB,OAJqB,EAKrB,QALqB,EAMrB,QANqB,EAOrB,cAPqB,EAQrB,UARqB,EASrB,WATqB,EAUrB,MAVqB,EAWrB,aAXqB,EAYrB,OAZqB,EAarB,iBAbqB,CAAvB;;AAgBA,MAAMC,KAAK,GAAIC,CAAD,IAAW;AACvB,MAAIL,IAAI,CAACM,MAAL,CAAYD,CAAZ,CAAJ,EAAoB;AAClB,WAAOA,CAAC,CAACE,IAAF,EAAP;AACD;;AACD,SAAOC,SAAP;AACD,CALD;;AAOA,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAaC,UAAkB,GAAG,EAAlC,KAAyC;AACvD,MAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;AAC1B,WAAOF,SAAP;AACD;;AACD,QAAMI,OAAO,GAAGd,IAAI,CAACa,UAAD,EAAaR,cAAb,CAApB;;AACA,MAAIS,OAAO,CAACC,IAAR,IAAgB,OAAOD,OAAO,CAACC,IAAf,KAAwB,QAA5C,EAAsD;AACpDD,IAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,CAAf;AACD;;AACD,MAAIH,UAAU,IAAIA,UAAU,CAACI,KAA7B,EAAoC;AAClC,QAAI,CAACH,OAAO,CAACI,oBAAb,EAAmC;AACjCJ,MAAAA,OAAO,CAACI,oBAAR,GAA+BC,IAAI,CAACb,KAAL,CAAWO,UAAU,CAACI,KAAtB,CAA/B;AACD;;AACDb,IAAAA,WAAW,CAACgB,MAAZ,CAAmBC,IAAnB,CAAwB,mFAAxB;AACD;;AACD,SAAOtB,OAAO,CAACe,OAAD,CAAP,GAAoB,KAAIF,EAAG,OAA3B,GAAqC,KAAIA,EAAG,SAAQX,WAAW,CAACqB,SAAZ,CAAsBR,OAAtB,CAA+B,EAA1F;AACD,CAfD;;AAiBA,eAAe,SAASS,OAAT,CAAiBX,EAAjB,EAA8BC,UAA9B,EAAkD;AAC/D,QAAMW,IAAI,GAAGb,OAAO,CAACC,EAAD,EAAKC,UAAL,CAApB;AACA,SAAOV,kBAAkB,CAACqB,IAAD,EAAOlB,KAAP,CAAzB;AACD","sourcesContent":["// @flow\n\nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\nimport queryString from 'query-string';\nimport { List } from 'immutable';\nimport useParseBraidValue from './parse-braid-value';\nimport { braidClient } from '../index';\n\nconst parameterNames = [\n  'depth',\n  'sort',\n  'order',\n  'limit',\n  'offset',\n  'filter',\n  'edgeContains',\n  'hasChild',\n  'hasParent',\n  'type',\n  'typesInTree',\n  'query',\n  'includeInactive',\n];\n\nconst parse = (v:any) => {\n  if (List.isList(v)) {\n    return v.toJS();\n  }\n  return undefined;\n};\n\nconst getName = (id?:string, parameters?:Object = {}) => {\n  if (typeof id !== 'string') {\n    return undefined;\n  }\n  const options = pick(parameters, parameterNames);\n  if (options.type && typeof options.type === 'string') {\n    options.type = options.type.split(',');\n  }\n  if (parameters && parameters.types) {\n    if (!options.typesInTreeWithDepth) {\n      options.typesInTreeWithDepth = JSON.parse(parameters.types);\n    }\n    braidClient.logger.warn('Deprecated in hooks/tree: \"types\" is deprecated please use \"typesInTreeWithDepth\"');\n  }\n  return isEmpty(options) ? `n/${id}/tree` : `n/${id}/tree?${queryString.stringify(options)}`;\n};\n\nexport default function useTree(id?: string, parameters?:Object) {\n  const name = getName(id, parameters);\n  return useParseBraidValue(name, parse);\n}\n"],"file":"tree.js"}