{"version":3,"sources":["../../src/hooks/notifications.js"],"names":["pick","isEmpty","queryString","useState","useEffect","useRef","List","cachedValue","cachedSubscribe","cachedUnsubscribe","parameterNames","parse","v","isList","toJS","undefined","getName","teamId","ids","parameters","nodeIds","Array","isArray","join","options","stringify","value","setValue","length","initialCallbackRef","skipInitialCallback","current","name","handleValue","JSON"],"mappings":"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","sourcesContent":["// @flow\n\nimport { pick, isEmpty } from 'lodash';\nimport queryString from 'query-string';\nimport { useState, useEffect, useRef } from 'react';\nimport { List } from 'immutable';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '../..';\n\nconst parameterNames = [\n  'limit',\n  'offset',\n  'filterNamed',\n  'query',\n];\n\nconst parse = (v:any) => {\n  if (List.isList(v)) {\n    return v.toJS();\n  }\n  return undefined;\n};\n\nconst getName = (teamId:string, ids:string | Array<string>, parameters?:Object = {}) => {\n  const nodeIds = Array.isArray(ids) ? ids.join('/') : ids;\n  const options = pick(parameters, parameterNames);\n  return isEmpty(options) ? `notifications/${teamId}/${nodeIds}` : `notifications/${teamId}/${nodeIds}?${queryString.stringify(options)}`;\n};\n\nexport default (teamId:string, ids:string | Array<string>, parameters?:Object) => {\n  const [value, setValue] = useState(typeof ids === 'string' || (Array.isArray(ids) && ids.length > 0) ? parse(cachedValue(getName(teamId, ids, parameters))) : undefined);\n  const initialCallbackRef = useRef(typeof value !== 'undefined' || !(typeof ids === 'string' || (Array.isArray(ids) && ids.length > 0)));\n\n  useEffect(() => {\n    const skipInitialCallback = initialCallbackRef.current;\n    initialCallbackRef.current = false;\n    if (!(typeof ids === 'string' || (Array.isArray(ids) && ids.length > 0))) {\n      if (!skipInitialCallback) {\n        setValue(undefined);\n      }\n      return;\n    }\n    const name = getName(teamId, ids, parameters);\n    const handleValue = (v:any) => {\n      setValue(parse(v));\n    };\n    cachedSubscribe(name, handleValue, undefined, skipInitialCallback);\n    return () => { // eslint-disable-line consistent-return\n      cachedUnsubscribe(name, handleValue);\n    };\n  }, [teamId, JSON.stringify(ids), JSON.stringify(parameters)]);\n\n  return value;\n};\n"],"file":"notifications.js"}