{"version":3,"sources":["../../src/hooks/notifications.js"],"names":["isEmpty","pick","queryString","List","useParseBraidValue","parameterNames","parse","v","isList","toJS","undefined","getName","teamId","ids","parameters","nodeIds","Array","isArray","join","options","stringify","useNotifications","name"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AAEA,MAAMC,cAAc,GAAG,CACrB,OADqB,EAErB,QAFqB,EAGrB,aAHqB,EAIrB,OAJqB,CAAvB;;AAOA,MAAMC,KAAK,GAAIC,CAAD,IAAW;AACvB,MAAIJ,IAAI,CAACK,MAAL,CAAYD,CAAZ,CAAJ,EAAoB;AAClB,WAAOA,CAAC,CAACE,IAAF,EAAP;AACD;;AACD,SAAOC,SAAP;AACD,CALD;;AAOA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAAgBC,GAAhB,EAA4CC,UAAkB,GAAG,EAAjE,KAAwE;AACtF,QAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcJ,GAAd,IAAqBA,GAAG,CAACK,IAAJ,CAAS,GAAT,CAArB,GAAqCL,GAArD;AACA,QAAMM,OAAO,GAAGlB,IAAI,CAACa,UAAD,EAAaT,cAAb,CAApB;AACA,SAAOL,OAAO,CAACmB,OAAD,CAAP,GAAoB,iBAAgBP,MAAO,IAAGG,OAAQ,EAAtD,GAA2D,iBAAgBH,MAAO,IAAGG,OAAQ,IAAGb,WAAW,CAACkB,SAAZ,CAAsBD,OAAtB,CAA+B,EAAtI;AACD,CAJD;;AAMA,eAAe,SAASE,gBAAT,CAA0BT,MAA1B,EAAyCC,GAAzC,EAAqEC,UAArE,EAAyF;AACtG,QAAMQ,IAAI,GAAGX,OAAO,CAACC,MAAD,EAASC,GAAT,EAAcC,UAAd,CAApB;AACA,SAAOV,kBAAkB,CAACkB,IAAD,EAAOhB,KAAP,CAAzB;AACD","sourcesContent":["// @flow\n\nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\nimport queryString from 'query-string';\nimport { List } from 'immutable';\nimport useParseBraidValue from './parse-braid-value';\n\nconst parameterNames = [\n  'limit',\n  'offset',\n  'filterNamed',\n  'query',\n];\n\nconst parse = (v:any) => {\n  if (List.isList(v)) {\n    return v.toJS();\n  }\n  return undefined;\n};\n\nconst getName = (teamId:string, ids:string | Array<string>, parameters?:Object = {}) => {\n  const nodeIds = Array.isArray(ids) ? ids.join('/') : ids;\n  const options = pick(parameters, parameterNames);\n  return isEmpty(options) ? `notifications/${teamId}/${nodeIds}` : `notifications/${teamId}/${nodeIds}?${queryString.stringify(options)}`;\n};\n\nexport default function useNotifications(teamId:string, ids:string | Array<string>, parameters?:Object) {\n  const name = getName(teamId, ids, parameters);\n  return useParseBraidValue(name, parse);\n}\n"],"file":"notifications.js"}