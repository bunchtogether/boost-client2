{"version":3,"sources":["../../../src/hooks/emitters/tree.js"],"names":["pick","isEmpty","queryString","EventEmitter","cachedValue","cachedSubscribe","cachedUnsubscribe","parameterNames","TreeEmitter","constructor","id","parameters","value","emit","setParameters","cleanup","options","type","split","name","stringify","handleUpdate","undefined"],"mappings":";;AAEA,SAASA,IAAT,EAAeC,OAAf,QAA8B,QAA9B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,YAAP,MAAyB,QAAzB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,iBAAvC,QAAgE,aAAhE;AAEA,MAAMC,cAAc,GAAG,CACrB,OADqB,EAErB,MAFqB,EAGrB,OAHqB,EAIrB,OAJqB,EAKrB,QALqB,EAMrB,cANqB,EAOrB,QAPqB,EAQrB,MARqB,EASrB,aATqB,EAUrB,OAVqB,EAWrB,iBAXqB,CAAvB;AAcA,eAAe,MAAMC,WAAN,SAA0BL,YAA1B,CAAuC;AAGpDM,EAAAA,WAAW,CAACC,EAAD,EAAaC,UAAmB,GAAG,EAAnC,EAAuC;AAChD;;AADgD;;AAAA,0CA6BlCC,KAAD,IAAe;AAC5B,WAAKC,IAAL,CAAU,OAAV,EAAmBD,KAAnB;AACD,KA/BiD;;AAEhD,SAAKE,aAAL,CAAmBJ,EAAnB,EAAuBC,UAAvB;AACD;;AAEDG,EAAAA,aAAa,CAACJ,EAAD,EAAaC,UAAmB,GAAG,EAAnC,EAAuC;AAClD,QAAI,CAACD,EAAL,EAAS;AACP,WAAKK,OAAL;AACA;AACD;;AACD,UAAMC,OAAO,GAAGhB,IAAI,CAACW,UAAD,EAAaJ,cAAb,CAApB;;AACA,QAAIS,OAAO,CAACC,IAAR,IAAgB,OAAOD,OAAO,CAACC,IAAf,KAAwB,QAA5C,EAAsD;AACpDD,MAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,CAAf;AACD;;AACD,UAAMC,IAAI,GAAGlB,OAAO,CAACe,OAAD,CAAP,GAAoB,KAAIN,EAAG,OAA3B,GAAqC,KAAIA,EAAG,SAAQR,WAAW,CAACkB,SAAZ,CAAsBJ,OAAtB,CAA+B,EAAhG;;AACA,QAAI,KAAKG,IAAL,KAAcA,IAAlB,EAAwB;AACtB,WAAKJ,OAAL;AACD;;AACDV,IAAAA,eAAe,CAACc,IAAD,EAAO,KAAKE,YAAZ,CAAf;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACD;;AAEQ,MAALP,KAAK,GAAG;AACV,QAAI,CAAC,KAAKO,IAAV,EAAgB;AACd,aAAOG,SAAP;AACD;;AACD,WAAOlB,WAAW,CAAC,KAAKe,IAAN,CAAlB;AACD;;AAMDJ,EAAAA,OAAO,GAAG;AACR,SAAKF,IAAL,CAAU,SAAV;;AACA,QAAI,CAAC,KAAKM,IAAV,EAAgB;AACd;AACD;;AACDb,IAAAA,iBAAiB,CAAC,KAAKa,IAAN,EAAY,KAAKE,YAAjB,CAAjB;AACA,WAAO,KAAKF,IAAZ;AACD;;AA3CmD","sourcesContent":["// @flow\n\nimport { pick, isEmpty } from 'lodash';\nimport queryString from 'query-string';\nimport EventEmitter from 'events';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '../../index';\n\nconst parameterNames = [\n  'depth',\n  'sort',\n  'order',\n  'limit',\n  'offset',\n  'edgeContains',\n  'filter',\n  'type',\n  'typesInTree',\n  'query',\n  'includeInactive',\n];\n\nexport default class TreeEmitter extends EventEmitter {\n  name: string | void;\n\n  constructor(id?:string, parameters?: Object = {}) {\n    super();\n    this.setParameters(id, parameters);\n  }\n\n  setParameters(id?:string, parameters?: Object = {}) {\n    if (!id) {\n      this.cleanup();\n      return;\n    }\n    const options = pick(parameters, parameterNames);\n    if (options.type && typeof options.type === 'string') {\n      options.type = options.type.split(',');\n    }\n    const name = isEmpty(options) ? `n/${id}/tree` : `n/${id}/tree?${queryString.stringify(options)}`;\n    if (this.name !== name) {\n      this.cleanup();\n    }\n    cachedSubscribe(name, this.handleUpdate);\n    this.name = name;\n  }\n\n  get value() {\n    if (!this.name) {\n      return undefined;\n    }\n    return cachedValue(this.name);\n  }\n\n  handleUpdate = (value:any) => {\n    this.emit('value', value);\n  }\n\n  cleanup() {\n    this.emit('cleanup');\n    if (!this.name) {\n      return;\n    }\n    cachedUnsubscribe(this.name, this.handleUpdate);\n    delete this.name;\n  }\n}\n"],"file":"tree.js"}