{"version":3,"sources":["../../src/hooks/source-permission.js"],"names":["isEmpty","pick","queryString","List","useParseBraidValue","parameterNames","parse","v","isList","toJS","undefined","getName","ids","permission","parameters","Array","isArray","length","parts","push","id","options","join","stringify","useSourcePermission","name"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AAEA,MAAMC,cAAc,GAAG,CACrB,MADqB,EAErB,OAFqB,EAGrB,OAHqB,EAIrB,QAJqB,EAKrB,QALqB,EAMrB,MANqB,EAOrB,OAPqB,EAQrB,gBARqB,EASrB,UATqB,EAUrB,WAVqB,EAWrB,cAXqB,EAYrB,oBAZqB,EAarB,aAbqB,CAAvB;;AAgBA,MAAMC,KAAK,GAAIC,CAAD,IAAW;AACvB,MAAIJ,IAAI,CAACK,MAAL,CAAYD,CAAZ,CAAJ,EAAoB;AAClB,WAAOA,CAAC,CAACE,IAAF,EAAP;AACD;;AACD,SAAOC,SAAP;AACD,CALD;;AAOA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAA8BC,UAA9B,EAAmDC,UAAmB,GAAG,EAAzE,KAAgF;AAC9F,MAAI,OAAOF,GAAP,KAAe,QAAf,IAA2B,CAACG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAhC,EAAoD;AAClD,WAAOF,SAAP;AACD;;AACD,MAAIK,KAAK,CAACC,OAAN,CAAcJ,GAAd,KAAsBA,GAAG,CAACK,MAAJ,KAAe,CAAzC,EAA4C;AAC1C,WAAOP,SAAP;AACD;;AACD,MAAI,OAAOG,UAAP,KAAsB,QAA1B,EAAoC;AAClC,WAAOH,SAAP;AACD;;AACD,QAAMQ,KAAK,GAAG,CAAC,GAAD,CAAd;;AACA,MAAI,OAAON,GAAP,KAAe,QAAnB,EAA6B;AAC3BM,IAAAA,KAAK,CAACC,IAAN,CAAWP,GAAX;AACD,GAFD,MAEO,IAAIG,KAAK,CAACC,OAAN,CAAcJ,GAAd,CAAJ,EAAwB;AAC7B,SAAK,MAAMQ,EAAX,IAAiBR,GAAjB,EAAsB;AACpBM,MAAAA,KAAK,CAACC,IAAN,CAAWC,EAAX;AACD;AACF;;AACDF,EAAAA,KAAK,CAACC,IAAN,CAAWN,UAAX;AACA,QAAMQ,OAAO,GAAGpB,IAAI,CAACa,UAAD,EAAaT,cAAb,CAApB;AACA,SAAOL,OAAO,CAACqB,OAAD,CAAP,GAAmBH,KAAK,CAACI,IAAN,CAAW,GAAX,CAAnB,GAAsC,GAAEJ,KAAK,CAACI,IAAN,CAAW,GAAX,CAAgB,IAAGpB,WAAW,CAACqB,SAAZ,CAAsBF,OAAtB,CAA+B,EAAjG;AACD,CArBD;;AAuBA,eAAe,SAASG,mBAAT,CAA6BZ,GAA7B,EAA0DC,UAA1D,EAA+EC,UAA/E,EAAoG;AACjH,QAAMW,IAAI,GAAGd,OAAO,CAACC,GAAD,EAAMC,UAAN,EAAkBC,UAAlB,CAApB;AACA,SAAOV,kBAAkB,CAACqB,IAAD,EAAOnB,KAAP,CAAzB;AACD","sourcesContent":["// @flow\n\nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\nimport queryString from 'query-string';\nimport { List } from 'immutable';\nimport useParseBraidValue from './parse-braid-value';\n\nconst parameterNames = [\n  'sort',\n  'order',\n  'limit',\n  'offset',\n  'filter',\n  'type',\n  'query',\n  'readPermission',\n  'hasChild',\n  'hasParent',\n  'onlineInTeam',\n  'parentEdgeContains',\n  'typesInTree',\n];\n\nconst parse = (v:any) => {\n  if (List.isList(v)) {\n    return v.toJS();\n  }\n  return undefined;\n};\n\nconst getName = (ids?:string | Array<string>, permission?: string, parameters?: Object = {}) => {\n  if (typeof ids !== 'string' && !Array.isArray(ids)) {\n    return undefined;\n  }\n  if (Array.isArray(ids) && ids.length === 0) {\n    return undefined;\n  }\n  if (typeof permission !== 'string') {\n    return undefined;\n  }\n  const parts = ['p'];\n  if (typeof ids === 'string') {\n    parts.push(ids);\n  } else if (Array.isArray(ids)) {\n    for (const id of ids) {\n      parts.push(id);\n    }\n  }\n  parts.push(permission);\n  const options = pick(parameters, parameterNames);\n  return isEmpty(options) ? parts.join('/') : `${parts.join('/')}?${queryString.stringify(options)}`;\n};\n\nexport default function useSourcePermission(ids?:string | Array<string>, permission?: string, parameters?: Object) {\n  const name = getName(ids, permission, parameters);\n  return useParseBraidValue(name, parse);\n}\n"],"file":"source-permission.js"}