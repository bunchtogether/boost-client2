{"version":3,"sources":["../../src/hooks/parse-braid-value.js"],"names":["useState","useEffect","useRef","useMemo","SubscribeError","braidClient","cachedValue","cachedSubscribe","cachedUnsubscribe","useParseBraidValue","name","parse","value","setValue","undefined","initialCallbackRef","errorStack","process","env","NODE_ENV","Error","stack","skipInitialCallback","current","handleError","error","originalStack","split","slice","join","logger"],"mappings":"AAEA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,eAAnC,EAAoDC,iBAApD,QAA6E,UAA7E;AAEA,eAAe,SAASC,kBAAT,CAA4BC,IAA5B,EAA2CC,KAA3C,EAA+D;AAC5E,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,OAAOU,IAAP,KAAgB,QAAhB,GAA2BJ,WAAW,CAACI,IAAD,CAAtC,GAA+CI,SAAhD,CAAlC;AACA,QAAMC,kBAAkB,GAAGb,MAAM,CAAC,OAAOU,KAAP,KAAiB,WAAjB,IAAgC,OAAOF,IAAP,KAAgB,QAAjD,CAAjC;AACA,QAAMM,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,OAAO,CAAC,MAAM,IAAIiB,KAAJ,GAAYC,KAAnB,EAA0B,EAA1B,CAA/C,GAA+EP,SAAlG;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,mBAAmB,GAAGP,kBAAkB,CAACQ,OAA/C;AACAR,IAAAA,kBAAkB,CAACQ,OAAnB,GAA6B,KAA7B;;AACA,QAAI,OAAOb,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAI,CAACY,mBAAL,EAA0B;AACxBT,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACD;;AACD;AACD;;AACD,UAAMU,WAAW,GAAGP,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAyCM,KAAD,IAAiB;AAC3E,UAAI,EAAEA,KAAK,YAAYrB,cAAnB,CAAJ,EAAwC;AACtC;AACD;;AACD,YAAMsB,aAAa,GAAGD,KAAK,CAACJ,KAA5B;;AACA,UAAI,OAAOL,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAI,OAAOU,aAAP,KAAyB,QAA7B,EAAuC;AACrCD,UAAAA,KAAK,CAACJ,KAAN,GAAc,CAACK,aAAa,CAACC,KAAd,CAAoB,IAApB,EAA0B,CAA1B,CAAD,EAA+B,GAAGX,UAAU,CAACW,KAAX,CAAiB,IAAjB,EAAuBC,KAAvB,CAA6B,CAA7B,CAAlC,EAAmEC,IAAnE,CAAwE,IAAxE,CAAd,CADqC,CACwD;AAC9F,SAFD,MAEO;AACLJ,UAAAA,KAAK,CAACJ,KAAN,GAAc,CAAE,6BAA4BX,IAAK,EAAnC,EAAsC,GAAGM,UAAU,CAACW,KAAX,CAAiB,IAAjB,EAAuBC,KAAvB,CAA6B,CAA7B,CAAzC,EAA0EC,IAA1E,CAA+E,IAA/E,CAAd,CADK,CAC+F;AACrG;AACF;;AACDxB,MAAAA,WAAW,CAACyB,MAAZ,CAAmBd,UAAnB,CAA8BS,KAA9B;AACD,KAbmB,GAahBX,SAbJ;AAcAP,IAAAA,eAAe,CAACG,IAAD,EAAOG,QAAP,EAAiBW,WAAjB,EAA8BF,mBAA9B,CAAf;AACA,WAAO,MAAM;AAAE;AACbd,MAAAA,iBAAiB,CAACE,IAAD,EAAOG,QAAP,EAAiBW,WAAjB,CAAjB;AACD,KAFD;AAGD,GA3BQ,EA2BN,CAACd,IAAD,CA3BM,CAAT;AA4BA,SAAOP,OAAO,CAAC,MAAMQ,KAAK,CAACC,KAAD,CAAZ,EAAqB,CAACD,KAAD,EAAQC,KAAR,CAArB,CAAd;AACD","sourcesContent":["// @flow\n\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { SubscribeError } from '@bunchtogether/braid-client';\nimport { braidClient, cachedValue, cachedSubscribe, cachedUnsubscribe } from '../index';\n\nexport default function useParseBraidValue(name?: string, parse:(any) => any) {\n  const [value, setValue] = useState(typeof name === 'string' ? cachedValue(name) : undefined);\n  const initialCallbackRef = useRef(typeof value !== 'undefined' || typeof name !== 'string');\n  const errorStack = process.env.NODE_ENV !== 'production' ? useMemo(() => new Error().stack, []) : undefined;\n  useEffect(() => {\n    const skipInitialCallback = initialCallbackRef.current;\n    initialCallbackRef.current = false;\n    if (typeof name !== 'string') {\n      if (!skipInitialCallback) {\n        setValue(undefined);\n      }\n      return;\n    }\n    const handleError = process.env.NODE_ENV !== 'production' ? (error:Error) => {\n      if (!(error instanceof SubscribeError)) {\n        return;\n      }\n      const originalStack = error.stack;\n      if (typeof errorStack === 'string') {\n        if (typeof originalStack === 'string') {\n          error.stack = [originalStack.split('\\n')[0], ...errorStack.split('\\n').slice(1)].join('\\n'); // eslint-disable-line no-param-reassign\n        } else {\n          error.stack = [`SubscribeError: Error for ${name}`, ...errorStack.split('\\n').slice(1)].join('\\n'); // eslint-disable-line no-param-reassign\n        }\n      }\n      braidClient.logger.errorStack(error);\n    } : undefined;\n    cachedSubscribe(name, setValue, handleError, skipInitialCallback);\n    return () => { // eslint-disable-line consistent-return\n      cachedUnsubscribe(name, setValue, handleError);\n    };\n  }, [name]);\n  return useMemo(() => parse(value), [parse, value]);\n}\n"],"file":"parse-braid-value.js"}