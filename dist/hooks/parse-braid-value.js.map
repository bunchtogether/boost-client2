{"version":3,"sources":["../../src/hooks/parse-braid-value.js"],"names":["useState","useEffect","useRef","useMemo","cachedValue","cachedSubscribe","cachedUnsubscribe","name","parse","value","setValue","undefined","initialCallbackRef","skipInitialCallback","current"],"mappings":"AAEA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsCC,OAAtC,QAAqD,OAArD;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,iBAAvC,QAAgE,IAAhE;AAGA,gBAAe,CAACC,IAAD,EAAgBC,KAAhB,KAAuC;AACpD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,OAAOO,IAAP,KAAgB,QAAhB,GAA2BH,WAAW,CAACG,IAAD,CAAtC,GAA+CI,SAAhD,CAAlC;AACA,QAAMC,kBAAkB,GAAGV,MAAM,CAAC,OAAOO,KAAP,KAAiB,WAAjB,IAAgC,OAAOF,IAAP,KAAgB,QAAjD,CAAjC;AACAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,mBAAmB,GAAGD,kBAAkB,CAACE,OAA/C;AACAF,IAAAA,kBAAkB,CAACE,OAAnB,GAA6B,KAA7B;;AACA,QAAI,OAAOP,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAI,CAACM,mBAAL,EAA0B;AACxBH,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACD;;AACD;AACD;;AACDN,IAAAA,eAAe,CAACE,IAAD,EAAOG,QAAP,EAAiBC,SAAjB,EAA4BE,mBAA5B,CAAf;AACA,WAAO,MAAM;AAAE;AACbP,MAAAA,iBAAiB,CAACC,IAAD,EAAOG,QAAP,CAAjB;AACD,KAFD;AAGD,GAbQ,EAaN,CAACH,IAAD,CAbM,CAAT;AAcA,SAAOJ,OAAO,CAAC,MAAMK,KAAK,CAACC,KAAD,CAAZ,EAAqB,CAACD,KAAD,EAAQC,KAAR,CAArB,CAAd;AACD,CAlBD","sourcesContent":["// @flow\n\nimport { useState, useEffect, useRef, useMemo } from 'react';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '..';\n\n\nexport default (name?: string, parse:(any) => any) => {\n  const [value, setValue] = useState(typeof name === 'string' ? cachedValue(name) : undefined);\n  const initialCallbackRef = useRef(typeof value !== 'undefined' || typeof name !== 'string');\n  useEffect(() => {\n    const skipInitialCallback = initialCallbackRef.current;\n    initialCallbackRef.current = false;\n    if (typeof name !== 'string') {\n      if (!skipInitialCallback) {\n        setValue(undefined);\n      }\n      return;\n    }\n    cachedSubscribe(name, setValue, undefined, skipInitialCallback);\n    return () => { // eslint-disable-line consistent-return\n      cachedUnsubscribe(name, setValue);\n    };\n  }, [name]);\n  return useMemo(() => parse(value), [parse, value]);\n};\n"],"file":"parse-braid-value.js"}