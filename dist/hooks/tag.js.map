{"version":3,"sources":["../../src/hooks/tag.js"],"names":["useState","useEffect","useRef","Map","cachedValue","cachedSubscribe","cachedUnsubscribe","parse","v","isMap","toJS","undefined","getName","source","target","value","setValue","initialCallbackRef","skipInitialCallback","current","name","handleValue"],"mappings":"AAEA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,iBAAvC,QAAgE,IAAhE;;AAEA,MAAMC,KAAK,GAAIC,CAAD,IAAW;AACvB,MAAIL,GAAG,CAACM,KAAJ,CAAUD,CAAV,CAAJ,EAAkB;AAChB,WAAOA,CAAC,CAACE,IAAF,EAAP;AACD;;AACD,SAAOC,SAAP;AACD,CALD;;AAOA,MAAMC,OAAO,GAAG,CAACC,MAAD,EAAgBC,MAAhB,KAAmC,QAAOD,MAAO,IAAGC,MAAO,EAA3E;;AAEA,gBAAe,CAACD,MAAD,EAAkBC,MAAlB,KAAsC;AACnD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC,OAAOa,MAAP,KAAkB,QAAlB,IAA8B,OAAOC,MAAP,KAAkB,QAAhD,GAA2DP,KAAK,CAACH,WAAW,CAACQ,OAAO,CAACC,MAAD,EAASC,MAAT,CAAR,CAAZ,CAAhE,GAAyGH,SAA1G,CAAlC;AACA,QAAMM,kBAAkB,GAAGf,MAAM,CAAC,OAAOa,KAAP,KAAiB,WAAjB,IAAgC,OAAOF,MAAP,KAAkB,QAAlD,IAA8D,OAAOC,MAAP,KAAkB,QAAjF,CAAjC;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,mBAAmB,GAAGD,kBAAkB,CAACE,OAA/C;AACAF,IAAAA,kBAAkB,CAACE,OAAnB,GAA6B,KAA7B;;AACA,QAAI,OAAON,MAAP,KAAkB,QAAlB,IAA8B,OAAOC,MAAP,KAAkB,QAApD,EAA8D;AAC5D,UAAI,CAACI,mBAAL,EAA0B;AACxBF,QAAAA,QAAQ,CAACL,SAAD,CAAR;AACD;;AACD;AACD;;AACD,UAAMS,IAAI,GAAGR,OAAO,CAACC,MAAD,EAASC,MAAT,CAApB;;AACA,UAAMO,WAAW,GAAIb,CAAD,IAAW;AAC7BQ,MAAAA,QAAQ,CAACT,KAAK,CAACC,CAAD,CAAN,CAAR;AACD,KAFD;;AAGAH,IAAAA,eAAe,CAACe,IAAD,EAAOC,WAAP,EAAoBV,SAApB,EAA+BO,mBAA/B,CAAf;AACA,WAAO,MAAM;AAAE;AACbZ,MAAAA,iBAAiB,CAACc,IAAD,EAAOC,WAAP,CAAjB;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACR,MAAD,EAASC,MAAT,CAjBM,CAAT;AAmBA,SAAOC,KAAP;AACD,CAxBD","sourcesContent":["// @flow\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Map } from 'immutable';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '..';\n\nconst parse = (v:any) => {\n  if (Map.isMap(v)) {\n    return v.toJS();\n  }\n  return undefined;\n};\n\nconst getName = (source:string, target:string) => `tags/${source}/${target}`;\n\nexport default (source?: string, target?: string) => {\n  const [value, setValue] = useState(typeof source === 'string' && typeof target === 'string' ? parse(cachedValue(getName(source, target))) : undefined);\n  const initialCallbackRef = useRef(typeof value !== 'undefined' || typeof source !== 'string' || typeof target !== 'string');\n\n  useEffect(() => {\n    const skipInitialCallback = initialCallbackRef.current;\n    initialCallbackRef.current = false;\n    if (typeof source !== 'string' || typeof target !== 'string') {\n      if (!skipInitialCallback) {\n        setValue(undefined);\n      }\n      return;\n    }\n    const name = getName(source, target);\n    const handleValue = (v:any) => {\n      setValue(parse(v));\n    };\n    cachedSubscribe(name, handleValue, undefined, skipInitialCallback);\n    return () => { // eslint-disable-line consistent-return\n      cachedUnsubscribe(name, handleValue);\n    };\n  }, [source, target]);\n\n  return value;\n};\n"],"file":"tag.js"}