{"version":3,"sources":["../../src/hooks/tag-count.js"],"names":["isEmpty","pick","queryString","useParseBraidValue","parameterNames","parse","v","getName","id","parameters","undefined","options","type","split","stringify","useTagCount","name"],"mappings":"AAEA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AAEA,MAAMC,cAAc,GAAG,CACrB,MADqB,EAErB,MAFqB,EAGrB,WAHqB,CAAvB;;AAMA,MAAMC,KAAK,GAAIC,CAAD,IAAWA,CAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAcC,UAAd,KAAsC;AACpD,MAAI,OAAOD,EAAP,KAAc,QAAlB,EAA4B;AAC1B,WAAOE,SAAP;AACD;;AACD,QAAMC,OAAO,GAAGV,IAAI,CAACQ,UAAD,EAAaL,cAAb,CAApB;;AACA,MAAIO,OAAO,CAACC,IAAR,IAAgB,OAAOD,OAAO,CAACC,IAAf,KAAwB,QAA5C,EAAsD;AACpDD,IAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,CAAf;AACD;;AACD,SAAOb,OAAO,CAACW,OAAD,CAAP,GAAoB,QAAOH,EAAG,QAA9B,GAAyC,QAAOA,EAAG,UAASN,WAAW,CAACY,SAAZ,CAAsBH,OAAtB,CAA+B,EAAlG;AACD,CATD;;AAWA,eAAe,SAASI,WAAT,CAAqBP,EAArB,EAAkCC,UAAlC,EAAuD;AACpE,QAAMO,IAAI,GAAGT,OAAO,CAACC,EAAD,EAAKC,UAAL,CAApB;AACA,SAAON,kBAAkB,CAACa,IAAD,EAAOX,KAAP,CAAzB;AACD","sourcesContent":["// @flow\n\nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\nimport queryString from 'query-string';\nimport useParseBraidValue from './parse-braid-value';\n\nconst parameterNames = [\n  'type',\n  'name',\n  'hasParent',\n];\n\nconst parse = (v:any) => v;\n\nconst getName = (id?: string, parameters?: Object) => {\n  if (typeof id !== 'string') {\n    return undefined;\n  }\n  const options = pick(parameters, parameterNames);\n  if (options.type && typeof options.type === 'string') {\n    options.type = options.type.split(',');\n  }\n  return isEmpty(options) ? `tags/${id}/count` : `tags/${id}/count?${queryString.stringify(options)}`;\n};\n\nexport default function useTagCount(id?: string, parameters?: Object) {\n  const name = getName(id, parameters);\n  return useParseBraidValue(name, parse);\n}\n"],"file":"tag-count.js"}