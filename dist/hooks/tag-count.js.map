{"version":3,"sources":["../../src/hooks/tag-count.js"],"names":["pick","isEmpty","queryString","useState","useEffect","useRef","cachedValue","cachedSubscribe","cachedUnsubscribe","parameterNames","getName","id","parameters","options","type","split","stringify","value","setValue","undefined","initialCallbackRef","skipInitialCallback","current","name","handleValue","v","JSON"],"mappings":"AAEA,SAASA,IAAT,EAAeC,OAAf,QAA8B,QAA9B;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,iBAAvC,QAAgE,UAAhE;AAEA,MAAMC,cAAc,GAAG,CACrB,MADqB,EAErB,MAFqB,EAGrB,WAHqB,CAAvB;;AAMA,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAYC,UAAmB,GAAG,EAAlC,KAAyC;AACvD,QAAMC,OAAO,GAAGb,IAAI,CAACY,UAAD,EAAaH,cAAb,CAApB;;AACA,MAAII,OAAO,CAACC,IAAR,IAAgB,OAAOD,OAAO,CAACC,IAAf,KAAwB,QAA5C,EAAsD;AACpDD,IAAAA,OAAO,CAACC,IAAR,GAAeD,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,GAAnB,CAAf;AACD;;AACD,SAAOd,OAAO,CAACY,OAAD,CAAP,GAAoB,QAAOF,EAAG,QAA9B,GAAyC,QAAOA,EAAG,UAAST,WAAW,CAACc,SAAZ,CAAsBH,OAAtB,CAA+B,EAAlG;AACD,CAND;;AAQA,gBAAe,CAACF,EAAD,EAAcC,UAAd,KAAsC;AACnD,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,OAAOQ,EAAP,KAAc,QAAd,GAAyBL,WAAW,CAACI,OAAO,CAACC,EAAD,EAAKC,UAAL,CAAR,CAApC,GAAgEO,SAAjE,CAAlC;AACA,QAAMC,kBAAkB,GAAGf,MAAM,CAAC,OAAOY,KAAP,KAAiB,WAAjB,IAAgC,OAAON,EAAP,KAAc,QAA/C,CAAjC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,mBAAmB,GAAGD,kBAAkB,CAACE,OAA/C;AACAF,IAAAA,kBAAkB,CAACE,OAAnB,GAA6B,KAA7B;;AACA,QAAI,OAAOX,EAAP,KAAc,QAAlB,EAA4B;AAC1B,UAAI,CAACU,mBAAL,EAA0B;AACxBH,QAAAA,QAAQ,CAACC,SAAD,CAAR;AACD;;AACD;AACD;;AACD,UAAMI,IAAI,GAAGb,OAAO,CAACC,EAAD,EAAKC,UAAL,CAApB;;AACA,UAAMY,WAAW,GAAIC,CAAD,IAAO;AACzBP,MAAAA,QAAQ,CAACO,CAAD,CAAR;AACD,KAFD;;AAGAlB,IAAAA,eAAe,CAACgB,IAAD,EAAOC,WAAP,EAAoBL,SAApB,EAA+BE,mBAA/B,CAAf;AACA,WAAO,MAAM;AAAE;AACbb,MAAAA,iBAAiB,CAACe,IAAD,EAAOC,WAAP,CAAjB;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACb,EAAD,EAAKe,IAAI,CAACV,SAAL,CAAeJ,UAAf,CAAL,CAjBM,CAAT;AAmBA,SAAOK,KAAP;AACD,CAxBD","sourcesContent":["// @flow\n\nimport { pick, isEmpty } from 'lodash';\nimport queryString from 'query-string';\nimport { useState, useEffect, useRef } from 'react';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '../index';\n\nconst parameterNames = [\n  'type',\n  'name',\n  'hasParent',\n];\n\nconst getName = (id:string, parameters?: Object = {}) => {\n  const options = pick(parameters, parameterNames);\n  if (options.type && typeof options.type === 'string') {\n    options.type = options.type.split(',');\n  }\n  return isEmpty(options) ? `tags/${id}/count` : `tags/${id}/count?${queryString.stringify(options)}`;\n};\n\nexport default (id?: string, parameters?: Object) => {\n  const [value, setValue] = useState(typeof id === 'string' ? cachedValue(getName(id, parameters)) : undefined);\n  const initialCallbackRef = useRef(typeof value !== 'undefined' || typeof id !== 'string');\n\n  useEffect(() => {\n    const skipInitialCallback = initialCallbackRef.current;\n    initialCallbackRef.current = false;\n    if (typeof id !== 'string') {\n      if (!skipInitialCallback) {\n        setValue(undefined);\n      }\n      return;\n    }\n    const name = getName(id, parameters);\n    const handleValue = (v) => {\n      setValue(v);\n    };\n    cachedSubscribe(name, handleValue, undefined, skipInitialCallback);\n    return () => { // eslint-disable-line consistent-return\n      cachedUnsubscribe(name, handleValue);\n    };\n  }, [id, JSON.stringify(parameters)]);\n\n  return value;\n};\n"],"file":"tag-count.js"}