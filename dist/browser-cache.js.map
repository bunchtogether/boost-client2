{"version":3,"sources":["../src/browser-cache.js"],"names":["SubscribeError","braidClient","flushIgnorePrefixes","db","request","self","indexedDB","open","onupgradeneeded","e","insertionsObjectStore","target","result","createObjectStore","keyPath","createIndex","unique","error","name","onerror","logger","errorStack","onsuccess","event","info","_dequeueSubscriptions","requestIdleCallback","clearStaleItems","getReadOnlyInsertionsObjectStore","transaction","durability","objectStore","getReadWriteInsertionsObjectStore","queuedInsertions","pendingStorageFlush","dequeueStorageOperations","_dequeueStorageOperations","length","updated","Date","now","key","pair","shift","subscriptions","has","put","console","commit","on","insertions","insertionLoop","item","prefix","startsWith","push","processBraidData","data","process","bind","itemKey","warn","insertionTransaction","insertionRequest","delete","dequeueRequested","dequeueSubscriptions","queueMicrotask","queuedSubscriptions","sessionStart","getRecent","lastSessionStartString","localStorage","getItem","index","getAll","IDBKeyRange","lowerBound","parseInt","items","setItem","toString","log","start","get","updatedKeyRange","upperBound","insertionsUpdatedIndex","insertionsRequest","getAllKeys","id"],"mappings":"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","sourcesContent":["// @flow\n\nimport { SubscribeError } from '@bunchtogether/braid-client';\nimport { braidClient, flushIgnorePrefixes } from './index';\n\nlet db;\n\n(() => {\n  const request = self.indexedDB.open('boost-03', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const insertionsObjectStore = e.target.result.createObjectStore('insertions', { keyPath: 'key' });\n      insertionsObjectStore.createIndex('updated', 'updated', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  request.onerror = (error) => {\n    braidClient.logger.error('Unable to open database');\n    braidClient.logger.errorStack(error);\n  };\n\n  request.onsuccess = function (event) {\n    braidClient.logger.info('Opened cache database');\n    db = event.target.result;\n    _dequeueSubscriptions(true);\n    requestIdleCallback(clearStaleItems);\n  };\n})();\n\nconst getReadOnlyInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  return objectStore;\n};\n\nconst getReadWriteInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  return objectStore;\n};\n\nconst queuedInsertions = [];\n\nlet pendingStorageFlush = false;\nconst dequeueStorageOperations = () => {\n  if (pendingStorageFlush) {\n    return;\n  }\n  pendingStorageFlush = true;\n  requestIdleCallback(() => {\n    pendingStorageFlush = false;\n    _dequeueStorageOperations();\n  });\n};\n\nconst _dequeueStorageOperations = () => { // eslint-disable-line no-underscore-dangle\n  if (queuedInsertions.length === 0) {\n    return;\n  }\n  const updated = Date.now();\n  const insertionsObjectStore = getReadWriteInsertionsObjectStore();\n  if (insertionsObjectStore !== null) {\n    while (queuedInsertions.length > 0) {\n      const [key, pair] = queuedInsertions.shift();\n      if (!braidClient.subscriptions.has(key)) { // Do not update items loaded from cache without a subscription\n        continue;\n      }\n      if (queuedInsertions.length > 0) {\n        insertionsObjectStore.put({ key, pair, updated });\n        continue;\n      }\n      // Only add a handler to the last item to accelerate the transaction\n      const request = insertionsObjectStore.put({ key, pair, updated });\n      request.onerror = (event) => {\n        braidClient.logger.error(`Unable to put insertion ${key} into indexedDB`);\n        console.error(event); // eslint-disable-line no-console\n      };\n    }\n    insertionsObjectStore.transaction.commit();\n  }\n};\n\nbraidClient.on('process', ([insertions]) => {\n  insertionLoop: // eslint-disable-line no-restricted-syntax,no-labels\n  for (const item of insertions) {\n    for (const prefix of flushIgnorePrefixes) {\n      if (item[0].startsWith(prefix)) {\n        continue insertionLoop; // eslint-disable-line no-labels\n      }\n    }\n    queuedInsertions.push(item);\n  }\n  dequeueStorageOperations();\n});\n\nconst processBraidData = braidClient.data.process.bind(braidClient.data);\n\nbraidClient.on('error', (error: Error | SubscribeError) => {\n  if (!(error instanceof SubscribeError)) {\n    return;\n  }\n  const { itemKey } = error;\n  if (typeof itemKey !== 'string') {\n    return;\n  }\n  if (typeof db === 'undefined') {\n    return;\n  }\n  braidClient.logger.warn(`Removing ${itemKey} from indexedDB after subscribe error`);\n  const insertionTransaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const insertionsObjectStore = insertionTransaction.objectStore('insertions');\n  const insertionRequest = insertionsObjectStore.delete(itemKey);\n  insertionRequest.onerror = function (event) {\n    braidClient.logger.error(`Unable to remove insertion ${itemKey} from indexedDB`);\n    console.error(event); // eslint-disable-line no-console\n  };\n  insertionTransaction.commit();\n});\n\nlet dequeueRequested = false;\nconst dequeueSubscriptions = () => {\n  if (dequeueRequested) {\n    return;\n  }\n  dequeueRequested = true;\n  queueMicrotask(() => {\n    dequeueRequested = false;\n    _dequeueSubscriptions(false);\n  });\n};\n\nconst queuedSubscriptions = [];\n\nconst sessionStart = Date.now();\n\nconst _dequeueSubscriptions = (getRecent:boolean) => { // eslint-disable-line no-underscore-dangle\n  if (!getRecent && queuedSubscriptions.length === 0) {\n    return;\n  }\n\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n\n  if (insertionsObjectStore === null) {\n    return;\n  }\n\n  if (getRecent) {\n    const lastSessionStartString = localStorage.getItem('BOOST_CACHE_TIMESTAMP');\n    // $FlowFixMe\n    const request = typeof lastSessionStartString === 'string' ? insertionsObjectStore.index('updated').getAll(IDBKeyRange.lowerBound(parseInt(lastSessionStartString, 10) - 1000 * 60 * 60 * 2)) : insertionsObjectStore.getAll();\n    request.onsuccess = function () {\n      const items = request.result;\n      const insertions = [];\n      for (const { key, pair } of items) {\n        insertions.push([key, pair]);\n      }\n      processBraidData([insertions, []]);\n      localStorage.setItem('BOOST_CACHE_TIMESTAMP', sessionStart.toString());\n      console.log('CACHED', insertions.length, Date.now() - start);\n    };\n    request.onerror = function (event) {\n      braidClient.logger.error('Unable to get recent insertions from indexedDB');\n      console.error(event); // eslint-disable-line no-console\n    };\n  }\n\n  const start = Date.now();\n  while (queuedSubscriptions.length > 0) {\n    const key = queuedSubscriptions.shift();\n    const insertionRequest = insertionsObjectStore.get(key);\n    insertionRequest.onsuccess = function () {\n      const item = insertionRequest.result;\n      if (typeof item !== 'undefined') {\n        if (braidClient.data.has(item.key)) {\n          return;\n        }\n        processBraidData([[[item.key, item.pair]], []]);\n      }\n      console.log(Date.now() - start);\n    };\n    insertionRequest.onerror = function (event) {\n      braidClient.logger.error(`Unable to get insertion ${key} from indexedDB`);\n      console.error(event); // eslint-disable-line no-console\n    };\n  }\n  insertionsObjectStore.transaction.commit();\n};\n\nbraidClient.on('subscribe', (key) => {\n  if (braidClient.data.has(key)) {\n    return;\n  }\n  queuedSubscriptions.push(key);\n  dequeueSubscriptions();\n});\n\nconst clearStaleItems = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadWriteInsertionsObjectStore();\n  // $FlowFixMe\n  const updatedKeyRange = IDBKeyRange.upperBound(Date.now() - 1000 * 60 * 60 * 24 * 7);\n  if (insertionsObjectStore === null) {\n    return;\n  }\n  const insertionsUpdatedIndex = insertionsObjectStore.index('updated');\n  const insertionsRequest = insertionsUpdatedIndex.getAllKeys(updatedKeyRange);\n  insertionsRequest.onsuccess = (event) => {\n    for (const id of event.target.result) {\n      insertionsObjectStore.delete(id);\n    }\n  };\n  insertionsRequest.onerror = function (event) {\n    braidClient.logger.error('Unable to clear stale insertions  from indexedDB');\n    console.error(event); // eslint-disable-line no-console\n  };\n};\n\n"],"file":"browser-cache.js"}