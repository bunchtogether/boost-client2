{"version":3,"sources":["../src/browser-cache.js"],"names":["SubscribeError","braidClient","cachedValue","flushIgnorePrefixes","db","request","self","indexedDB","open","onupgradeneeded","e","insertionsObjectStore","target","result","createObjectStore","keyPath","createIndex","unique","error","name","deletionsObjectStore","onerror","logger","errorStack","onsuccess","event","info","dequeueStorageOperations","getRecentlyUpdatedItems","getReadOnlyInsertionsObjectStore","transaction","durability","objectStore","onabort","console","getReadOnlyDeletionsObjectStore","getReadWriteInsertionsObjectStore","getReadWriteDeletionsObjectStore","queuedInsertions","queuedDeletions","pendingStorageFlush","requestAnimationFrame","_dequeueStorageOperations","length","id","key","shift","put","updated","Date","now","pair","on","insertions","deletions","insertionLoop","item","prefix","startsWith","push","deletionLoop","processBraidData","data","process","bind","itemKey","warn","insertionTransaction","insertionRequest","delete","deletionTransaction","deletionRequest","queuedSubscriptions","pendingSubscriptionsFlush","dequeueSubscriptions","queueMicrotask","_dequeueSubscriptions","get","insertionPromise","Promise","resolve","deletionPromise","all","then","updatedKeyRange","IDBKeyRange","lowerBound","insertionsUpdatedIndex","index","insertionsPromise","openCursor","cursor","value","continue","deletionsUpdatedIndex","deletionsPromise"],"mappings":"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","sourcesContent":["// @flow\n\nimport { SubscribeError } from '@bunchtogether/braid-client';\nimport { braidClient, cachedValue, flushIgnorePrefixes } from './index';\n\nlet db;\n\n(() => {\n  const request = self.indexedDB.open('boost-02', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const insertionsObjectStore = e.target.result.createObjectStore('insertions', { keyPath: 'key' });\n      insertionsObjectStore.createIndex('updated', 'updated', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const deletionsObjectStore = e.target.result.createObjectStore('deletions', { keyPath: 'key' });\n      deletionsObjectStore.createIndex('updated', 'updated', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  request.onerror = (error) => {\n    braidClient.logger.error('Unable to open database');\n    braidClient.logger.errorStack(error);\n  };\n\n  request.onsuccess = function (event) {\n    braidClient.logger.info('Opened cache database');\n    db = event.target.result;\n    dequeueStorageOperations();\n    getRecentlyUpdatedItems();\n  };\n})();\n\nconst getReadOnlyInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only insertions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only insertions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst getReadOnlyDeletionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['deletions'], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('deletions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only deletions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only deletions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst getReadWriteInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only insertions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only insertions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst getReadWriteDeletionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['deletions'], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('deletions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only deletions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only deletions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst queuedInsertions = [];\nconst queuedDeletions = [];\n\n\nlet pendingStorageFlush = false;\nconst dequeueStorageOperations = () => {\n  if (pendingStorageFlush) {\n    return;\n  }\n  pendingStorageFlush = true;\n  requestAnimationFrame(() => {\n    pendingStorageFlush = false;\n    _dequeueStorageOperations();\n  });\n};\n\nconst _dequeueStorageOperations = () => { // eslint-disable-line no-underscore-dangle\n  if (queuedDeletions.length > 0) {\n    const deletionsObjectStore = getReadWriteDeletionsObjectStore();\n    if (deletionsObjectStore !== null) {\n      while (queuedDeletions.length > 0) {\n        const [id, key] = queuedDeletions.shift();\n        if (queuedDeletions.length > 0) {\n          deletionsObjectStore.put({ key, id, updated: Date.now() });\n          continue;\n        }\n        // Only add a handler to the last item to accelerate the transaction\n        const request = deletionsObjectStore.put({ key, id, updated: Date.now() });\n        request.onerror = (event) => {\n          braidClient.logger.error(`Unable to put deletion ${key} into indexedDB`);\n          console.error(event); // eslint-disable-line no-console\n        };\n      }\n    }\n  }\n  if (queuedInsertions.length > 0) {\n    const insertionsObjectStore = getReadWriteInsertionsObjectStore();\n    if (insertionsObjectStore !== null) {\n      while (queuedInsertions.length > 0) {\n        const [key, pair] = queuedInsertions.shift();\n        if (queuedInsertions.length > 0) {\n          insertionsObjectStore.put({ key, pair, updated: Date.now() });\n          continue;\n        }\n        // Only add a handler to the last item to accelerate the transaction\n        const request = insertionsObjectStore.put({ key, pair, updated: Date.now() });\n        request.onerror = (event) => {\n          braidClient.logger.error(`Unable to put insertion ${key} into indexedDB`);\n          console.error(event); // eslint-disable-line no-console\n        };\n      }\n    }\n  }\n};\n\nbraidClient.on('process', ([insertions, deletions]) => {\n  insertionLoop: // eslint-disable-line no-restricted-syntax,no-labels\n  for (const item of insertions) {\n    for (const prefix of flushIgnorePrefixes) {\n      if (item[0].startsWith(prefix)) {\n        continue insertionLoop; // eslint-disable-line no-labels\n      }\n    }\n    queuedInsertions.push(item);\n  }\n\n  deletionLoop: // eslint-disable-line no-restricted-syntax,no-labels\n  for (const item of deletions) {\n    for (const prefix of flushIgnorePrefixes) {\n      if (item[1].startsWith(prefix)) {\n        continue deletionLoop; // eslint-disable-line no-labels\n      }\n    }\n    queuedDeletions.push(item);\n  }\n\n  dequeueStorageOperations();\n});\n\nconst processBraidData = braidClient.data.process.bind(braidClient.data);\n\nbraidClient.on('error', (error: Error | SubscribeError) => {\n  if (!(error instanceof SubscribeError)) {\n    return;\n  }\n  const { itemKey } = error;\n  if (typeof itemKey !== 'string') {\n    return;\n  }\n  if (typeof db === 'undefined') {\n    return;\n  }\n  braidClient.logger.warn(`Removing ${itemKey} from indexedDB after subscribe error`);\n  const insertionTransaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const insertionsObjectStore = insertionTransaction.objectStore('insertions');\n  const insertionRequest = insertionsObjectStore.delete(itemKey);\n  insertionRequest.onerror = function (event) {\n    braidClient.logger.error(`Unable to remove insertion ${itemKey} from indexedDB`);\n    console.error(event); // eslint-disable-line no-console\n  };\n  const deletionTransaction = db.transaction(['deletions'], 'readwrite', { durability: 'relaxed' });\n  const deletionsObjectStore = deletionTransaction.objectStore('deletions');\n  const deletionRequest = deletionsObjectStore.delete(itemKey);\n  deletionRequest.onerror = function (event) {\n    braidClient.logger.error(`Unable to remove deletion ${itemKey} from indexedDB`);\n    console.error(event); // eslint-disable-line no-console\n  };\n});\n\nconst queuedSubscriptions = [];\n\nlet pendingSubscriptionsFlush = false;\nconst dequeueSubscriptions = () => {\n  if (pendingSubscriptionsFlush) {\n    return;\n  }\n  pendingSubscriptionsFlush = true;\n  // $FlowFixMe\n  queueMicrotask(() => {\n    pendingSubscriptionsFlush = false;\n    _dequeueSubscriptions();\n  });\n};\n\nconst _dequeueSubscriptions = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n  const deletionsObjectStore = getReadOnlyDeletionsObjectStore();\n  if (insertionsObjectStore === null) {\n    return null;\n  }\n  if (deletionsObjectStore === null) {\n    return null;\n  }\n  while (queuedSubscriptions.length > 0) {\n    const key = queuedSubscriptions.shift();\n    const insertionRequest = insertionsObjectStore.get(key);\n    const insertionPromise = new Promise((resolve) => {\n      insertionRequest.onsuccess = function () {\n        const item = insertionRequest.result;\n        if (typeof item !== 'undefined') {\n          resolve([[item.key, item.pair]]);\n        } else {\n          resolve([]);\n        }\n      };\n      insertionRequest.onerror = function (event) {\n        braidClient.logger.error(`Unable to get insertion ${key} from indexedDB`);\n        console.error(event); // eslint-disable-line no-console\n        resolve([]);\n      };\n    });\n    const deletionRequest = deletionsObjectStore.get(key);\n    const deletionPromise = new Promise((resolve) => {\n      deletionRequest.onsuccess = function () {\n        const item = deletionRequest.result;\n        if (typeof item !== 'undefined') {\n          resolve([[item.id, item.key]]);\n        } else {\n          resolve([]);\n        }\n      };\n      deletionRequest.onerror = function (event) {\n        braidClient.logger.error(`Unable to get deletion ${key} from indexedDB`);\n        console.error(event); // eslint-disable-line no-console\n        resolve([]);\n      };\n    });\n    Promise.all([insertionPromise, deletionPromise]).then(processBraidData);\n  }\n  return null;\n};\n\nbraidClient.on('subscribe', (key) => {\n  if (typeof cachedValue(key) !== 'undefined') {\n    return;\n  }\n  queuedSubscriptions.push(key);\n  dequeueSubscriptions();\n});\n\nconst getRecentlyUpdatedItems = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n  const deletionsObjectStore = getReadOnlyDeletionsObjectStore();\n  // $FlowFixMe\n  const updatedKeyRange = IDBKeyRange.lowerBound(Date.now() - 1000 * 60 * 60 * 24);\n  if (insertionsObjectStore === null) {\n    return null;\n  }\n  if (deletionsObjectStore === null) {\n    return null;\n  }\n  const insertionsUpdatedIndex = insertionsObjectStore.index('updated');\n  const insertionsPromise = new Promise((resolve) => {\n    const insertions = [];\n    const request = insertionsUpdatedIndex.openCursor(updatedKeyRange);\n    request.onsuccess = (event) => {\n      const cursor = event.target.result;\n      if (cursor) {\n        insertions.push([cursor.value.key, cursor.value.pair]);\n        cursor.continue();\n      } else {\n        resolve(insertions);\n      }\n    };\n    request.onerror = function (event) {\n      braidClient.logger.error('Unable to get insertions within the last day from indexedDB');\n      console.error(event); // eslint-disable-line no-console\n      resolve(insertions);\n    };\n  });\n  const deletionsUpdatedIndex = deletionsObjectStore.index('updated');\n  const deletionsPromise = new Promise((resolve) => {\n    const deletions = [];\n    const request = deletionsUpdatedIndex.openCursor(updatedKeyRange);\n    request.onsuccess = (event) => {\n      const cursor = event.target.result;\n      if (cursor) {\n        deletions.push([cursor.value.id, cursor.value.key]);\n        cursor.continue();\n      } else {\n        resolve(deletions);\n      }\n    };\n    request.onerror = function (event) {\n      braidClient.logger.error('Unable to get deletions within the last day from indexedDB');\n      console.error(event); // eslint-disable-line no-console\n      resolve(deletions);\n    };\n  });\n  Promise.all([insertionsPromise, deletionsPromise]).then(processBraidData);\n  return null;\n};\n\n"],"file":"browser-cache.js"}