{"version":3,"sources":["../src/browser-cache.js"],"names":["SubscribeError","braidClient","flushIgnorePrefixes","db","insertionIdSet","Set","request","self","indexedDB","open","onupgradeneeded","e","insertionsObjectStore","target","result","createObjectStore","keyPath","createIndex","unique","error","name","onerror","logger","errorStack","onsuccess","event","info","dequeueStorageOperations","getRecentlyUpdatedItems","getReadOnlyInsertionsObjectStore","transaction","durability","objectStore","onabort","console","getReadWriteInsertionsObjectStore","queuedInsertions","pendingStorageFlush","requestIdleCallback","_dequeueStorageOperations","length","updated","Date","now","key","pair","shift","put","commit","on","insertions","insertionLoop","item","prefix","startsWith","has","delete","push","processBraidData","data","process","bind","itemKey","warn","insertionTransaction","insertionRequest","queuedSubscriptions","dequeueSubscriptions","get","add","updatedKeyRange","IDBKeyRange","lowerBound","insertionsUpdatedIndex","index","insertionsRequest","getAll","items","map","x","clearStaleItems","upperBound","getAllKeys","id"],"mappings":"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","sourcesContent":["// @flow\n\nimport { SubscribeError } from '@bunchtogether/braid-client';\nimport { braidClient, flushIgnorePrefixes } from './index';\n\nlet db;\n\nconst insertionIdSet = new Set();\n\n(() => {\n  const request = self.indexedDB.open('boost-03', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const insertionsObjectStore = e.target.result.createObjectStore('insertions', { keyPath: 'key' });\n      insertionsObjectStore.createIndex('updated', 'updated', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  request.onerror = (error) => {\n    braidClient.logger.error('Unable to open database');\n    braidClient.logger.errorStack(error);\n  };\n\n  request.onsuccess = function (event) {\n    braidClient.logger.info('Opened cache database');\n    db = event.target.result;\n    dequeueStorageOperations();\n    getRecentlyUpdatedItems();\n  };\n})();\n\nconst getReadOnlyInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only insertions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only insertions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst getReadWriteInsertionsObjectStore = () => {\n  if (typeof db === 'undefined') {\n    return null;\n  }\n  const transaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore('insertions');\n  transaction.onabort = (event) => {\n    braidClient.logger.error('Read only insertions transaction was aborted');\n    console.error(event); // eslint-disable-line no-console\n  };\n  transaction.onerror = (event) => {\n    braidClient.logger.error('Error in read only insertions transaction');\n    console.error(event); // eslint-disable-line no-console\n  };\n  return objectStore;\n};\n\nconst queuedInsertions = [];\n\nlet pendingStorageFlush = false;\nconst dequeueStorageOperations = () => {\n  if (pendingStorageFlush) {\n    return;\n  }\n  pendingStorageFlush = true;\n  requestIdleCallback(() => {\n    pendingStorageFlush = false;\n    _dequeueStorageOperations();\n  });\n};\n\nconst _dequeueStorageOperations = () => { // eslint-disable-line no-underscore-dangle\n  if (queuedInsertions.length === 0) {\n    return;\n  }\n  const updated = Date.now();\n  const insertionsObjectStore = getReadWriteInsertionsObjectStore();\n  if (insertionsObjectStore !== null) {\n    while (queuedInsertions.length > 0) {\n      const [key, pair] = queuedInsertions.shift();\n      if (queuedInsertions.length > 0) {\n        insertionsObjectStore.put({ key, pair, updated });\n        continue;\n      }\n      // Only add a handler to the last item to accelerate the transaction\n      const request = insertionsObjectStore.put({ key, pair, updated });\n      request.onerror = (event) => {\n        braidClient.logger.error(`Unable to put insertion ${key} into indexedDB`);\n        console.error(event); // eslint-disable-line no-console\n      };\n    }\n    insertionsObjectStore.transaction.commit();\n  }\n};\n\nbraidClient.on('process', ([insertions]) => {\n  insertionLoop: // eslint-disable-line no-restricted-syntax,no-labels\n  for (const item of insertions) {\n    for (const prefix of flushIgnorePrefixes) {\n      if (item[0].startsWith(prefix)) {\n        continue insertionLoop; // eslint-disable-line no-labels\n      }\n    }\n    if (insertionIdSet.has(item[1][0])) {\n      insertionIdSet.delete(item[1][0]);\n      return;\n    }\n    queuedInsertions.push(item);\n  }\n  dequeueStorageOperations();\n});\n\nconst processBraidData = braidClient.data.process.bind(braidClient.data);\n\nbraidClient.on('error', (error: Error | SubscribeError) => {\n  if (!(error instanceof SubscribeError)) {\n    return;\n  }\n  const { itemKey } = error;\n  if (typeof itemKey !== 'string') {\n    return;\n  }\n  if (typeof db === 'undefined') {\n    return;\n  }\n  braidClient.logger.warn(`Removing ${itemKey} from indexedDB after subscribe error`);\n  const insertionTransaction = db.transaction(['insertions'], 'readwrite', { durability: 'relaxed' });\n  const insertionsObjectStore = insertionTransaction.objectStore('insertions');\n  const insertionRequest = insertionsObjectStore.delete(itemKey);\n  insertionRequest.onerror = function (event) {\n    braidClient.logger.error(`Unable to remove insertion ${itemKey} from indexedDB`);\n    console.error(event); // eslint-disable-line no-console\n  };\n  insertionTransaction.commit();\n});\n\nconst queuedSubscriptions = [];\n\nconst dequeueSubscriptions = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n  if (insertionsObjectStore === null) {\n    return null;\n  }\n  while (queuedSubscriptions.length > 0) {\n    const key = queuedSubscriptions.shift();\n    const insertionRequest = insertionsObjectStore.get(key);\n    insertionRequest.onsuccess = function () {\n      const item = insertionRequest.result;\n      if (typeof item !== 'undefined') {\n        processBraidData([[[item.key, item.pair]], []]);\n        insertionIdSet.add(item.pair[0]);\n      }\n    };\n    insertionRequest.onerror = function (event) {\n      braidClient.logger.error(`Unable to get insertion ${key} from indexedDB`);\n      console.error(event); // eslint-disable-line no-console\n    };\n  }\n  insertionsObjectStore.transaction.commit();\n  return null;\n};\n\nbraidClient.on('subscribe', (key) => {\n  if (braidClient.data.has(key)) {\n    return;\n  }\n  queuedSubscriptions.push(key);\n  dequeueSubscriptions();\n});\n\nconst getRecentlyUpdatedItems = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n  // $FlowFixMe\n  const updatedKeyRange = IDBKeyRange.lowerBound(Date.now() - 1000 * 60 * 60 * 24);\n  if (insertionsObjectStore === null) {\n    return;\n  }\n  const insertionsUpdatedIndex = insertionsObjectStore.index('updated');\n  const insertionsRequest = insertionsUpdatedIndex.getAll(updatedKeyRange);\n  insertionsRequest.onsuccess = (event) => {\n    const items = event.target.result;\n    const insertions = items.map((x) => [x.key, x.pair]);\n    processBraidData([insertions, []]);\n    // $FlowFixMe\n    requestIdleCallback(clearStaleItems);\n  };\n  insertionsRequest.onerror = function (event) {\n    braidClient.logger.error('Unable to get insertions within the last day from indexedDB');\n    console.error(event); // eslint-disable-line no-console\n  };\n  insertionsObjectStore.transaction.commit();\n};\n\nconst clearStaleItems = () => { // eslint-disable-line no-underscore-dangle\n  const insertionsObjectStore = getReadOnlyInsertionsObjectStore();\n  // $FlowFixMe\n  const updatedKeyRange = IDBKeyRange.upperBound(Date.now() - 1000 * 60 * 60 * 24 * 7);\n  if (insertionsObjectStore === null) {\n    return;\n  }\n  const insertionsUpdatedIndex = insertionsObjectStore.index('updated');\n  const insertionsRequest = insertionsUpdatedIndex.getAllKeys(updatedKeyRange);\n  insertionsRequest.onsuccess = (event) => {\n    for (const id of event.target.result) {\n      insertionsObjectStore.delete(id);\n    }\n  };\n  insertionsRequest.onerror = function (event) {\n    braidClient.logger.error('Unable to clear stale insertions  from indexedDB');\n    console.error(event); // eslint-disable-line no-console\n  };\n  insertionsObjectStore.transaction.commit();\n};\n\n"],"file":"browser-cache.js"}