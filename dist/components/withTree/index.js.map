{"version":3,"sources":["../../../src/components/withTree/index.jsx"],"names":["React","isEmpty","pick","omit","queryString","hoistNonReactStatics","cachedValue","cachedSubscribe","cachedUnsubscribe","logSubscribeError","parameterNames","Set","getParameters","args","Object","assign","parameters","wrap","Component","getName","props","id","idName","undefined","options","types","typesInTreeWithDepth","JSON","parse","console","warn","stringify","NewComponent","getDerivedStateFromProps","nextProps","prevState","name","tree","constructor","value","setState","error","state","componentDidMount","handleUpdate","handleError","shouldComponentUpdate","nextState","nextPropsKeys","keys","filter","key","has","propsKeys","length","i","componentWillUnmount","render","propertyName"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { List, Map as ImmutableMap } from 'immutable';\nimport * as React from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport queryString from 'query-string';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '../../index';\nimport { logSubscribeError } from '../lib/error-logging';\n\nconst parameterNames = new Set([\n  'depth',\n  'sort',\n  'order',\n  'limit',\n  'offset',\n  'edgeContains',\n  'filter',\n  'type',\n  'typesInTree',\n  'typesInTreeWithDepth',\n  'query',\n  'includeInactive',\n]);\n\nconst getParameters = (...args:Array<Object>):Parameters => pick(Object.assign({}, ...args), [...parameterNames]);\n\ntype Parameters = {\n  depth?: number,\n  sort?: string,\n  order?: string,\n  limit?: number,\n  offset?: number,\n  filter?: string,\n  edgeContains?: string,\n  type?: string | Array<string>,\n  query?: string,\n  typesInTree?: Array<string>,\n  typesInTreeWithDepth?: Array<string>,\n  includeInactive?: boolean,\n  propertyName?: string,\n  idName?: string,\n  types?: string,\n};\n\ntype State = {\n  name?: string,\n  tree?: List<ImmutableMap<string, *>>,\n};\n\nexport default (parameters: Parameters = {}) => function wrap<Props: Object>(Component: React.AbstractComponent<Props>): React.AbstractComponent<$Diff<Props, { [string]: List<ImmutableMap<string, *>> }>> {\n  const getName = (props: Props) => {\n    const id = parameters.idName ? props[parameters.idName] : props.id;\n    if (!id) {\n      return undefined;\n    }\n    const options = getParameters(parameters, props);\n    if (parameters.types) {\n      if (!options.typesInTreeWithDepth) {\n        options.typesInTreeWithDepth = JSON.parse(parameters.types);\n      }\n      console.warn('Deprecated in components/withTree: \"types\" is deprecated please use \"typesInTreeWithDepth\"');\n    }\n    if (isEmpty(options)) {\n      return `n/${id}/tree`;\n    }\n    return `n/${id}/tree?${queryString.stringify(options)}`;\n  };\n\n  class NewComponent extends React.Component<Props, State> {\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n      const name = getName(nextProps);\n      if (name !== prevState.name) {\n        return {\n          name,\n          tree: cachedValue(name),\n        };\n      }\n      return null;\n    }\n\n    constructor(props: Props) {\n      super(props);\n      const name = getName(props);\n      this.state = {\n        name,\n        tree: cachedValue(name),\n      };\n    }\n\n    async componentDidMount() {\n      if (this.state.name) {\n        cachedSubscribe(this.state.name, this.handleUpdate, this.handleError);\n      }\n    }\n\n    shouldComponentUpdate(nextProps:Props, nextState:State) {\n      if (this.state.name !== nextState.name) {\n        const name = this.state.name;\n        if (name) {\n          cachedUnsubscribe(name, this.handleUpdate, this.handleError);\n        }\n        if (nextState.name) {\n          cachedSubscribe(nextState.name, this.handleUpdate, this.handleError);\n        }\n      }\n      if (this.state.tree !== nextState.tree) {\n        return true;\n      }\n      const nextPropsKeys = Object.keys(nextProps).filter((key) => !parameterNames.has(key));\n      const propsKeys = Object.keys(this.props).filter((key) => !parameterNames.has(key));\n      if (nextPropsKeys.length !== propsKeys.length) {\n        return true;\n      }\n      for (let i = 0; i < propsKeys.length; i += 1) {\n        const key = propsKeys[i];\n        if (nextProps[key] !== this.props[key]) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    async componentWillUnmount() {\n      if (this.state.name) {\n        cachedUnsubscribe(this.state.name, this.handleUpdate, this.handleError);\n      }\n    }\n\n\n    handleUpdate = (value:any) => {\n      this.setState({\n        tree: value,\n      });\n    }\n\n    handleError = (error:Error) => {\n      logSubscribeError(this.state.name, error);\n    }\n\n    render() {\n      const props = omit(this.props, [...parameterNames]);\n      props[parameters.propertyName || 'tree'] = this.state.tree;\n      return <Component {...props} />;\n    }\n  }\n\n  hoistNonReactStatics(NewComponent, Component);\n\n  return NewComponent;\n};\n\n"],"file":"index.js"}