{"version":3,"sources":["../../../src/components/withEdgeListener/index.jsx"],"names":["React","isEmpty","pick","omit","queryString","hoistNonReactStatics","cachedValue","cachedSubscribe","cachedUnsubscribe","parameterNames","Set","getParameters","args","Object","assign","parameters","wrap","Component","getName","props","options","undefined","stringify","NewComponent","getDerivedStateFromProps","nextProps","prevState","name","edge","constructor","value","setState","state","componentDidMount","handleUpdate","shouldComponentUpdate","nextState","nextPropsKeys","keys","filter","key","has","propsKeys","length","i","componentWillUnmount","render","propertyName"],"mappings":"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","sourcesContent":["// @flow\n\nimport type { Map as ImmutableMap } from 'immutable';\nimport * as React from 'react';\nimport { isEmpty, pick, omit } from 'lodash';\nimport queryString from 'query-string';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { cachedValue, cachedSubscribe, cachedUnsubscribe } from '../../index';\n\nconst parameterNames = new Set([\n  'parentId',\n  'parentType',\n  'childId',\n  'childType',\n  'contains',\n]);\n\nconst getParameters = (...args:Array<Object>):Parameters => pick(Object.assign({}, ...args), [...parameterNames]);\n\ntype Parameters = {\n  parentId?: string,\n  parentType?: string,\n  childId?: string,\n  childType?: string,\n  contains?: string,\n  propertyName?: string\n};\n\ntype State = {\n  name?: string,\n  edge?: ImmutableMap<string, *>\n};\n\nexport default (parameters: Parameters = {}) => function wrap<Props: Object>(Component: React.AbstractComponent<Props>): React.AbstractComponent<$Diff<Props, { [string]: ImmutableMap<string, *> }>> {\n  const getName = (props: Props) => {\n    const options = getParameters(parameters, props);\n    if (isEmpty(options)) {\n      return undefined;\n    }\n    return `e?${queryString.stringify(options)}`;\n  };\n\n  class NewComponent extends React.Component<Props, State> {\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n      const name = getName(nextProps);\n      if (name !== prevState.name) {\n        return {\n          name,\n          edge: cachedValue(name),\n        };\n      }\n      return null;\n    }\n\n    constructor(props: Props) {\n      super(props);\n      const name = getName(props);\n      this.state = {\n        name,\n        edge: cachedValue(name),\n      };\n    }\n\n    async componentDidMount() {\n      if (this.state.name) {\n        cachedSubscribe(this.state.name, this.handleUpdate);\n      }\n    }\n\n    shouldComponentUpdate(nextProps:Props, nextState:State) {\n      if (this.state.name !== nextState.name) {\n        const name = this.state.name;\n        if (name) {\n          cachedUnsubscribe(name, this.handleUpdate);\n        }\n        if (nextState.name) {\n          cachedSubscribe(nextState.name, this.handleUpdate);\n        }\n      }\n      if (this.state.edge !== nextState.edge) {\n        return true;\n      }\n      const nextPropsKeys = Object.keys(nextProps).filter((key) => !parameterNames.has(key));\n      const propsKeys = Object.keys(this.props).filter((key) => !parameterNames.has(key));\n      if (nextPropsKeys.length !== propsKeys.length) {\n        return true;\n      }\n      for (let i = 0; i < propsKeys.length; i += 1) {\n        const key = propsKeys[i];\n        if (nextProps[key] !== this.props[key]) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    async componentWillUnmount() {\n      if (this.state.name) {\n        cachedUnsubscribe(this.state.name, this.handleUpdate);\n      }\n    }\n\n\n    handleUpdate = (value:any) => {\n      this.setState({\n        edge: value,\n      });\n    }\n\n    render() {\n      const props = omit(this.props, [...parameterNames]);\n      props[parameters.propertyName || 'edge'] = this.state.edge;\n      return <Component {...props} />;\n    }\n  }\n\n  hoistNonReactStatics(NewComponent, Component);\n\n  return NewComponent;\n};\n\n"],"file":"index.js"}