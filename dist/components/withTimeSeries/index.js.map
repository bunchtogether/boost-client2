{"version":3,"sources":["../../../src/components/withTimeSeries/index.jsx"],"names":["React","Map","ImmutableMap","List","is","hoistNonReactStatics","braidClient","agent","isLive","ms","mins","parameters","delta","end","Date","now","machines","names","wrap","Component","NewComponent","constructor","props","eventHandlerFunctions","subscriptions","Set","state","values","mounted","componentDidMount","setupInitialState","shouldComponentUpdate","nextProps","nextState","machine","name","unsubscribeToValueUpdates","delete","unsubscribeToAllUpdates","set","newData","fetchValues","valueName","Object","keys","setIn","add","subscribeToValueUpdates","setState","componentWillUnmount","machinesValues","singleName","initialValues","initialData","machineName","machineData","entries","nameValues","timeseriesData","get","query","join","body","error","console","eventHandlerName","handler","data","list","getIn","value","newValue","shift","push","timestamp","addServerEventListener","removeServerEventListener","render"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Map as ImmutableMap, List, is } from 'immutable';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { braidClient } from '../../index';\nimport { agent } from '../../api-agent';\n\ntype DataPoint = {\n  timestamp: string,\n  machine: string,\n  name: string,\n  value: number,\n};\n\ntype Parameters = {\n  delta: number,\n  end?: number,\n  machines: ImmutableMap<string>,\n  names: ImmutableMap<string>,\n};\n\ntype State = {\n  values: ImmutableMap<string, ImmutableMap<string, List<number>>>\n};\n\nfunction isLive(ms: number) {\n  const mins = (ms / 1000) / 60;\n  return mins < 10;\n}\n\ntype InjectedProps = {| values: ImmutableMap<string, ImmutableMap<string, List<number>>> | void |};\n\nexport default (parameters: Parameters = { delta: 60, end: Date.now(), machines: [], names: [] }) => function wrap<Props: Object>(Component: React.AbstractComponent<Props>): React.AbstractComponent<{| ...Props, ...InjectedProps |}> {   // eslint-disable-line\n  class NewComponent extends React.Component<Props, State> {\n    constructor(props: Props) {\n      super(props);\n      this.eventHandlerFunctions = {};\n      this.subscriptions = new Set();\n      this.state = {\n        values: ImmutableMap(),\n      };\n      this.mounted = false;\n    }\n\n    componentDidMount() {\n      this.mounted = true;\n      this.setupInitialState(this.props.machines, this.props.names, this.props.delta);\n    }\n\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\n      if (!is(this.props.machines, nextProps.machines) || !is(this.props.names, nextProps.names) || this.props.delta !== nextProps.delta || this.props.end !== nextProps.end) {\n        const names = this.props.names;\n        (async () => {\n          let values = nextState.values;\n          for (const machine of this.props.machines) {\n            for (const name of names) {\n              this.unsubscribeToValueUpdates(machine, name);\n            }\n            values = values.delete(machine);\n          }\n          this.unsubscribeToAllUpdates();\n          for (const machine of nextProps.machines) {\n            values = values.set(machine, ImmutableMap());\n            for (const name of names) {\n              const newData = await this.fetchValues([machine], [name], nextProps.delta, nextProps.end);\n              if (newData[machine]) {\n                for (const valueName of Object.keys(newData[machine])) {\n                  values = values.setIn([machine, valueName], List(newData[machine][valueName]));\n                  if (isLive(nextProps.delta)) {\n                    this.subscriptions.add(`timeseries/${machine}/${valueName}`);\n                    this.subscribeToValueUpdates(machine, valueName);\n                  }\n                }\n              }\n            }\n          }\n          if (this.mounted) {\n            this.setState({ values });\n          }\n        })();\n      }\n      return this.state.values !== nextState.values;\n    }\n\n    async componentWillUnmount() {\n      this.mounted = false;\n      for (const machine of this.props.machines) {\n        for (const name of this.props.names) {\n          this.unsubscribeToValueUpdates(machine, name);\n        }\n      }\n      this.unsubscribeToAllUpdates();\n    }\n\n\n    async setupInitialState(machines: Array<string>, names: Array<string>, delta: number, end?: number = Date.now()) {\n      let machinesValues = this.state.values;\n      for (const machine of machines) {\n        for (const singleName of names) {\n          const initialValues = await this.fetchValues([machine], [singleName], delta, end);\n          const initialData = ImmutableMap(initialValues);\n          for (const [machineName, machineData] of initialData.entries()) {\n            for (const [name, nameValues] of Object.entries(machineData)) {\n              machinesValues = machinesValues.setIn([machineName, name], List(nameValues));\n              if (isLive(delta)) {\n                this.subscribeToValueUpdates(machineName, name);\n              }\n            }\n          }\n        }\n      }\n      if (this.mounted) {\n        this.setState({\n          values: machinesValues,\n        });\n      }\n    }\n\n    eventHandlerFunctions: Object;\n    mounted: boolean;\n    subscriptions: Set<string>;\n\n    async fetchValues(machines: Array<string>, names: Array<string>, delta: number, end?: number = Date.now()) {   // eslint-disable-line\n      try {\n        const timeseriesData = await agent.get(`/timeseries/${delta}/${end}`)\n          .query({\n            machines: machines.join(','),\n            names: names.join(','),\n          });\n        return timeseriesData.body;\n      } catch (error) {\n        console.error('Error fetching initial time series values: ', error);\n        return [];\n      }\n    }\n\n    subscribeToValueUpdates(machine: string, name: string) {\n      const eventHandlerName = `timeseries/${machine}/${name}`;\n      const handler = (data: DataPoint) => {\n        const list = this.state.values.getIn([machine, name]);\n        if (list && data.value && this.mounted) {\n          const newValue = list.shift().push([data.timestamp, data.value]);\n          this.setState({ values: this.state.values.setIn([machine, name], newValue) });\n        }\n      };\n      braidClient.addServerEventListener(eventHandlerName, handler);\n      this.eventHandlerFunctions[eventHandlerName] = handler;\n    }\n\n    unsubscribeToValueUpdates(machine: string, name: string) {\n      const eventHandlerName = `timeseries/${machine}/${name}`;\n      const handler = this.eventHandlerFunctions[eventHandlerName];\n      braidClient.removeServerEventListener(eventHandlerName, handler);\n    }\n\n    unsubscribeToAllUpdates() {\n      for (const eventHandlerName of this.subscriptions) {\n        const handler = this.eventHandlerFunctions[eventHandlerName];\n        braidClient.removeServerEventListener(eventHandlerName, handler);\n        this.subscriptions.delete(eventHandlerName);\n      }\n    }\n\n    render() {\n      return <Component values={this.state.values} {...this.props} />;\n    }\n  }\n\n  hoistNonReactStatics(NewComponent, Component);\n\n  return NewComponent;\n};\n\n"],"file":"index.js"}