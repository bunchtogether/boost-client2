{"version":3,"sources":["../src/storage.js"],"names":["AsyncStorage","key","cacheAvailable","self","caches","location","origin","navigator","serviceWorker","cachePrefix","cachePromise","console","log","undefined","cache","open","error","set","dump","size","Math","round","length","put","Response","setItem","get","resp","match","body","dumpString","text","getItem","clear","delete","removeItem"],"mappings":"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","sourcesContent":["// @flow\n\nimport AsyncStorage from '@callstack/async-storage';\n\nconst key = 'boost-client-cache-dump';\n\nconst cacheAvailable = self.caches && self.location && self.location.origin && self.navigator && self.navigator.serviceWorker;\nconst cachePrefix = cacheAvailable ? `${self.location.origin}/` : '';\n\nconst cachePromise = (async () => {\n  if (!cacheAvailable) {\n    console.log('Using AsyncStorage for Boost client cache');\n    return undefined;\n  }\n  console.log('Using Cache API for Boost client cache');\n  let cache;\n  try {\n    cache = await caches.open('boost-client-cache');\n  } catch (error) {\n    return undefined;\n  }\n  return cache;\n})();\n\nexport async function set(dump: string) {\n  const size = Math.round(dump.length / 1024 / 1024 * 100) / 100;\n  if (size > 4) {\n    console.log(`Warning ${size} MB Boost client cache might exceed device limits`);\n  }\n  const cache = await cachePromise;\n  if (cache) {\n    return cache.put(`${cachePrefix}${key}`, new Response(dump));\n  }\n  return AsyncStorage.setItem(key, dump);\n}\n\nexport async function get() {\n  const cache = await cachePromise;\n  if (cache) {\n    const resp = await cache.match(`${cachePrefix}${key}`);\n    if (resp && resp.body) {\n      const dumpString = await resp.text();\n      if (typeof dumpString === 'string') {\n        const size = Math.round(dumpString.length / 1024 / 1024 * 100) / 100;\n        console.log(`Loading ${size} MB Boost client cache`);\n        return dumpString;\n      }\n      return null;\n    }\n    return null;\n  }\n  const dumpString = await AsyncStorage.getItem(key);\n  if (typeof dumpString === 'string') {\n    const size = Math.round(dumpString.length / 1024 / 1024 * 100) / 100;\n    console.log(`Loading ${size} MB Boost client cache`);\n    return dumpString;\n  }\n  return null;\n}\n\nexport async function clear() {\n  const cache = await cachePromise;\n  if (cache) {\n    return cache.delete(`${cachePrefix}${key}`);\n  }\n  return AsyncStorage.removeItem(key);\n}\n"],"file":"storage.js"}